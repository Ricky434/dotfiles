#!/bin/sh

# This script checks if the gpu that should be passed through is bound to vfio, if it isn't it stops qemu, avoiding getting libvirt stuck forever
#
# After that, it reserves only 2 cores for the host while the vm is running, and it allocates hugepages for it

command=$2

# Function to allocate hugepages
HUGEPAGES=8192 # 8192*2MiB=16GiB

function activate_hugepages {
  echo "Allocating hugepages..."
  # Try to allocate
  echo $HUGEPAGES > /proc/sys/vm/nr_hugepages # this is only for 2MiB pages
  #echo  $HUGEPAGES > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages # this is only for 1GiB pages
  ALLOC_PAGES=`cat /proc/sys/vm/nr_hugepages`

  TRIES=0
  # If the number of allocated hugepages is not the number requested try again
  while (( $ALLOC_PAGES != $HUGEPAGES && $TRIES < 1000 )); do
    # Drop caches and compact memory to increase chance to find enough contiguous ram
    echo 3 > /proc/sys/vm/drop_caches
    echo 1 > /proc/sys/vm/compact_memory
    #sleep 2
    # Try to allocate
    echo $HUGEPAGES > /proc/sys/vm/nr_hugepages # this is only for 2MiB pages
    #echo  $HUGEPAGES > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages # this is only for 1GiB pages
    ALLOC_PAGES=`cat /proc/sys/vm/nr_hugepages`
    echo "Tried to allocate hugepages. Got pages $ALLOC_PAGES / $HUGEPAGES"
    let TRIES+=1
  done;
  # After too many tries, give up if none succeded
  if [ "$ALLOC_PAGES" -ne "$HUGEPAGES" ]; then
    echo "Not able to allocate hugepages"
    echo 0 > /proc/sys/vm/nr_hugepages
    exit 1
  fi
}


# Set windows and linux monitors (find them with xrandr -q | grep 'VGA\|HDMI\|DP\|LVDS')
windows_monitor="HDMI-A-0"
linux_monitor="DisplayPort-2"

if [ "$command" = "prepare" ]; then
	vfioIds=$(sed 's/.*vfio-pci ids=//' < /etc/modprobe.d/vfio.conf)
	dmesgOut=$(sudo dmesg | grep -i vfio)
	res=false

	# Check if at least one of the ids of gpu that should be bound by vfio show up in dmesg
	for vfioId in ${vfioIds//,/ }
	do
	    if [[ "$dmesgOut" == *"$vfioId"* ]]; then
		res=true
	    fi
	done

	if [ "$res" = false ]; then
		echo "### error check: GPU not bound by vfio, make sure to have passed it through" 1>&2
		exit 1
	fi
    	
	# Allocate hugepages
    	activate_hugepages;
elif [ "$command" = "started" ]; then
    systemctl set-property --runtime -- system.slice AllowedCPUs=0,8,1,9
    systemctl set-property --runtime -- user.slice AllowedCPUs=0,8,1,9
    systemctl set-property --runtime -- init.scope AllowedCPUs=0,8,1,9

    # Turn off monitor that will be used for windows
    # I have to specify the display, because xrandr wouldn't know what to use
    # I have to do it as jelly because apparently with root it doesn't work
    if [ "$XDG_SESSION_TYPE" = "x11" ]; then
	# Currently not working, probably because the XDG_SESSION_VARIABLE is not set in the environment that executes this script
	# Problem is I only can use this command when I'm not in wayland
    	sudo -u jelly DISPLAY=:0 xrandr --output $windows_monitor --off
    fi
elif [ "$command" = "release" ]; then
    systemctl set-property --runtime -- system.slice AllowedCPUs=0-15
    systemctl set-property --runtime -- user.slice AllowedCPUs=0-15
    systemctl set-property --runtime -- init.scope AllowedCPUs=0-15

    # Turn on monitor that was used for windows
    if [ "$XDG_SESSION_TYPE" = "x11" ]; then
    	sudo -u jelly DISPLAY=:0 xrandr --output $windows_monitor --auto --left-of $linux_monitor
    fi

    # Deallocate hugepages
    echo 0 > /proc/sys/vm/nr_hugepages
fi
